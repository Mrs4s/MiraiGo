// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: data.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bootloader   string `protobuf:"bytes,1,opt,name=bootloader,proto3" json:"bootloader,omitempty"`
	ProcVersion  string `protobuf:"bytes,2,opt,name=procVersion,proto3" json:"procVersion,omitempty"`
	Codename     string `protobuf:"bytes,3,opt,name=codename,proto3" json:"codename,omitempty"`
	Incremental  string `protobuf:"bytes,4,opt,name=incremental,proto3" json:"incremental,omitempty"`
	Fingerprint  string `protobuf:"bytes,5,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	BootId       string `protobuf:"bytes,6,opt,name=bootId,proto3" json:"bootId,omitempty"`
	AndroidId    string `protobuf:"bytes,7,opt,name=androidId,proto3" json:"androidId,omitempty"`
	BaseBand     string `protobuf:"bytes,8,opt,name=baseBand,proto3" json:"baseBand,omitempty"`
	InnerVersion string `protobuf:"bytes,9,opt,name=innerVersion,proto3" json:"innerVersion,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceInfo) GetBootloader() string {
	if x != nil {
		return x.Bootloader
	}
	return ""
}

func (x *DeviceInfo) GetProcVersion() string {
	if x != nil {
		return x.ProcVersion
	}
	return ""
}

func (x *DeviceInfo) GetCodename() string {
	if x != nil {
		return x.Codename
	}
	return ""
}

func (x *DeviceInfo) GetIncremental() string {
	if x != nil {
		return x.Incremental
	}
	return ""
}

func (x *DeviceInfo) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *DeviceInfo) GetBootId() string {
	if x != nil {
		return x.BootId
	}
	return ""
}

func (x *DeviceInfo) GetAndroidId() string {
	if x != nil {
		return x.AndroidId
	}
	return ""
}

func (x *DeviceInfo) GetBaseBand() string {
	if x != nil {
		return x.BaseBand
	}
	return ""
}

func (x *DeviceInfo) GetInnerVersion() string {
	if x != nil {
		return x.InnerVersion
	}
	return ""
}

type RequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RptConfigList []*ConfigSeq `protobuf:"bytes,1,rep,name=rpt_config_list,json=rptConfigList,proto3" json:"rpt_config_list,omitempty"`
}

func (x *RequestBody) Reset() {
	*x = RequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBody) ProtoMessage() {}

func (x *RequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBody.ProtoReflect.Descriptor instead.
func (*RequestBody) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1}
}

func (x *RequestBody) GetRptConfigList() []*ConfigSeq {
	if x != nil {
		return x.RptConfigList
	}
	return nil
}

type ConfigSeq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Version int32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ConfigSeq) Reset() {
	*x = ConfigSeq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSeq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSeq) ProtoMessage() {}

func (x *ConfigSeq) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSeq.ProtoReflect.Descriptor instead.
func (*ConfigSeq) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigSeq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ConfigSeq) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type D50ReqBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid                   int64   `protobuf:"varint,1,opt,name=appid,proto3" json:"appid,omitempty"`
	MaxPkgSize              int32   `protobuf:"varint,2,opt,name=maxPkgSize,proto3" json:"maxPkgSize,omitempty"`
	StartTime               int32   `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	StartIndex              int32   `protobuf:"varint,4,opt,name=startIndex,proto3" json:"startIndex,omitempty"`
	ReqNum                  int32   `protobuf:"varint,5,opt,name=reqNum,proto3" json:"reqNum,omitempty"`
	UinList                 []int64 `protobuf:"varint,6,rep,packed,name=uinList,proto3" json:"uinList,omitempty"`
	ReqMusicSwitch          int32   `protobuf:"varint,91001,opt,name=reqMusicSwitch,proto3" json:"reqMusicSwitch,omitempty"`
	ReqMutualmarkAlienation int32   `protobuf:"varint,101001,opt,name=reqMutualmarkAlienation,proto3" json:"reqMutualmarkAlienation,omitempty"`
	ReqMutualmarkScore      int32   `protobuf:"varint,141001,opt,name=reqMutualmarkScore,proto3" json:"reqMutualmarkScore,omitempty"`
	ReqKsingSwitch          int32   `protobuf:"varint,151001,opt,name=reqKsingSwitch,proto3" json:"reqKsingSwitch,omitempty"`
	ReqMutualmarkLbsshare   int32   `protobuf:"varint,181001,opt,name=reqMutualmarkLbsshare,proto3" json:"reqMutualmarkLbsshare,omitempty"`
}

func (x *D50ReqBody) Reset() {
	*x = D50ReqBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *D50ReqBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*D50ReqBody) ProtoMessage() {}

func (x *D50ReqBody) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use D50ReqBody.ProtoReflect.Descriptor instead.
func (*D50ReqBody) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3}
}

func (x *D50ReqBody) GetAppid() int64 {
	if x != nil {
		return x.Appid
	}
	return 0
}

func (x *D50ReqBody) GetMaxPkgSize() int32 {
	if x != nil {
		return x.MaxPkgSize
	}
	return 0
}

func (x *D50ReqBody) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *D50ReqBody) GetStartIndex() int32 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *D50ReqBody) GetReqNum() int32 {
	if x != nil {
		return x.ReqNum
	}
	return 0
}

func (x *D50ReqBody) GetUinList() []int64 {
	if x != nil {
		return x.UinList
	}
	return nil
}

func (x *D50ReqBody) GetReqMusicSwitch() int32 {
	if x != nil {
		return x.ReqMusicSwitch
	}
	return 0
}

func (x *D50ReqBody) GetReqMutualmarkAlienation() int32 {
	if x != nil {
		return x.ReqMutualmarkAlienation
	}
	return 0
}

func (x *D50ReqBody) GetReqMutualmarkScore() int32 {
	if x != nil {
		return x.ReqMutualmarkScore
	}
	return 0
}

func (x *D50ReqBody) GetReqKsingSwitch() int32 {
	if x != nil {
		return x.ReqKsingSwitch
	}
	return 0
}

func (x *D50ReqBody) GetReqMutualmarkLbsshare() int32 {
	if x != nil {
		return x.ReqMutualmarkLbsshare
	}
	return 0
}

type D388ReqBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetType        int32           `protobuf:"varint,1,opt,name=netType,proto3" json:"netType,omitempty"`
	Subcmd         int32           `protobuf:"varint,2,opt,name=subcmd,proto3" json:"subcmd,omitempty"`
	MsgTryUpImgReq []*TryUpImgReq  `protobuf:"bytes,3,rep,name=msgTryUpImgReq,proto3" json:"msgTryUpImgReq,omitempty"`
	MsgTryUpPttReq []*TryUpPttReq  `protobuf:"bytes,5,rep,name=msgTryUpPttReq,proto3" json:"msgTryUpPttReq,omitempty"`
	MsgGetPttReq   []*GetPttUrlReq `protobuf:"bytes,6,rep,name=msgGetPttReq,proto3" json:"msgGetPttReq,omitempty"`
	CommandId      int32           `protobuf:"varint,7,opt,name=commandId,proto3" json:"commandId,omitempty"`
	Extension      []byte          `protobuf:"bytes,1001,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *D388ReqBody) Reset() {
	*x = D388ReqBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *D388ReqBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*D388ReqBody) ProtoMessage() {}

func (x *D388ReqBody) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use D388ReqBody.ProtoReflect.Descriptor instead.
func (*D388ReqBody) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4}
}

func (x *D388ReqBody) GetNetType() int32 {
	if x != nil {
		return x.NetType
	}
	return 0
}

func (x *D388ReqBody) GetSubcmd() int32 {
	if x != nil {
		return x.Subcmd
	}
	return 0
}

func (x *D388ReqBody) GetMsgTryUpImgReq() []*TryUpImgReq {
	if x != nil {
		return x.MsgTryUpImgReq
	}
	return nil
}

func (x *D388ReqBody) GetMsgTryUpPttReq() []*TryUpPttReq {
	if x != nil {
		return x.MsgTryUpPttReq
	}
	return nil
}

func (x *D388ReqBody) GetMsgGetPttReq() []*GetPttUrlReq {
	if x != nil {
		return x.MsgGetPttReq
	}
	return nil
}

func (x *D388ReqBody) GetCommandId() int32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (x *D388ReqBody) GetExtension() []byte {
	if x != nil {
		return x.Extension
	}
	return nil
}

type D388RespBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientIp        int32           `protobuf:"varint,1,opt,name=clientIp,proto3" json:"clientIp,omitempty"`
	SubCmd          int32           `protobuf:"varint,2,opt,name=subCmd,proto3" json:"subCmd,omitempty"`
	MsgTryUpImgRsp  []*TryUpImgResp `protobuf:"bytes,3,rep,name=msgTryUpImgRsp,proto3" json:"msgTryUpImgRsp,omitempty"`
	MsgTryUpPttRsp  []*TryUpPttResp `protobuf:"bytes,5,rep,name=msgTryUpPttRsp,proto3" json:"msgTryUpPttRsp,omitempty"`
	MsgGetPttUrlRsp []*GetPttUrlRsp `protobuf:"bytes,6,rep,name=msgGetPttUrlRsp,proto3" json:"msgGetPttUrlRsp,omitempty"`
}

func (x *D388RespBody) Reset() {
	*x = D388RespBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *D388RespBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*D388RespBody) ProtoMessage() {}

func (x *D388RespBody) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use D388RespBody.ProtoReflect.Descriptor instead.
func (*D388RespBody) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5}
}

func (x *D388RespBody) GetClientIp() int32 {
	if x != nil {
		return x.ClientIp
	}
	return 0
}

func (x *D388RespBody) GetSubCmd() int32 {
	if x != nil {
		return x.SubCmd
	}
	return 0
}

func (x *D388RespBody) GetMsgTryUpImgRsp() []*TryUpImgResp {
	if x != nil {
		return x.MsgTryUpImgRsp
	}
	return nil
}

func (x *D388RespBody) GetMsgTryUpPttRsp() []*TryUpPttResp {
	if x != nil {
		return x.MsgTryUpPttRsp
	}
	return nil
}

func (x *D388RespBody) GetMsgGetPttUrlRsp() []*GetPttUrlRsp {
	if x != nil {
		return x.MsgGetPttUrlRsp
	}
	return nil
}

type GetPttUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCode       int64  `protobuf:"varint,1,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	DstUin          int64  `protobuf:"varint,2,opt,name=dstUin,proto3" json:"dstUin,omitempty"`
	FileId          int64  `protobuf:"varint,3,opt,name=fileId,proto3" json:"fileId,omitempty"`
	FileMd5         []byte `protobuf:"bytes,4,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	ReqTerm         int32  `protobuf:"varint,5,opt,name=reqTerm,proto3" json:"reqTerm,omitempty"`
	ReqPlatformType int32  `protobuf:"varint,6,opt,name=reqPlatformType,proto3" json:"reqPlatformType,omitempty"`
	InnerIp         int32  `protobuf:"varint,7,opt,name=innerIp,proto3" json:"innerIp,omitempty"`
	BuType          int32  `protobuf:"varint,8,opt,name=buType,proto3" json:"buType,omitempty"`
	BuildVer        []byte `protobuf:"bytes,9,opt,name=buildVer,proto3" json:"buildVer,omitempty"`
	//int64 fileId = 10;
	FileKey         []byte `protobuf:"bytes,11,opt,name=fileKey,proto3" json:"fileKey,omitempty"`
	Codec           int32  `protobuf:"varint,12,opt,name=codec,proto3" json:"codec,omitempty"`
	BuId            int32  `protobuf:"varint,13,opt,name=buId,proto3" json:"buId,omitempty"`
	ReqTransferType int32  `protobuf:"varint,14,opt,name=reqTransferType,proto3" json:"reqTransferType,omitempty"`
	IsAuto          int32  `protobuf:"varint,15,opt,name=isAuto,proto3" json:"isAuto,omitempty"`
}

func (x *GetPttUrlReq) Reset() {
	*x = GetPttUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPttUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPttUrlReq) ProtoMessage() {}

func (x *GetPttUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPttUrlReq.ProtoReflect.Descriptor instead.
func (*GetPttUrlReq) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{6}
}

func (x *GetPttUrlReq) GetGroupCode() int64 {
	if x != nil {
		return x.GroupCode
	}
	return 0
}

func (x *GetPttUrlReq) GetDstUin() int64 {
	if x != nil {
		return x.DstUin
	}
	return 0
}

func (x *GetPttUrlReq) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *GetPttUrlReq) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *GetPttUrlReq) GetReqTerm() int32 {
	if x != nil {
		return x.ReqTerm
	}
	return 0
}

func (x *GetPttUrlReq) GetReqPlatformType() int32 {
	if x != nil {
		return x.ReqPlatformType
	}
	return 0
}

func (x *GetPttUrlReq) GetInnerIp() int32 {
	if x != nil {
		return x.InnerIp
	}
	return 0
}

func (x *GetPttUrlReq) GetBuType() int32 {
	if x != nil {
		return x.BuType
	}
	return 0
}

func (x *GetPttUrlReq) GetBuildVer() []byte {
	if x != nil {
		return x.BuildVer
	}
	return nil
}

func (x *GetPttUrlReq) GetFileKey() []byte {
	if x != nil {
		return x.FileKey
	}
	return nil
}

func (x *GetPttUrlReq) GetCodec() int32 {
	if x != nil {
		return x.Codec
	}
	return 0
}

func (x *GetPttUrlReq) GetBuId() int32 {
	if x != nil {
		return x.BuId
	}
	return 0
}

func (x *GetPttUrlReq) GetReqTransferType() int32 {
	if x != nil {
		return x.ReqTransferType
	}
	return 0
}

func (x *GetPttUrlReq) GetIsAuto() int32 {
	if x != nil {
		return x.IsAuto
	}
	return 0
}

type GetPttUrlRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId         int64   `protobuf:"varint,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	FileMd5        []byte  `protobuf:"bytes,2,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	Result         int32   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	FailMsg        []byte  `protobuf:"bytes,4,opt,name=failMsg,proto3" json:"failMsg,omitempty"`
	BytesDownUrl   []byte  `protobuf:"bytes,5,opt,name=bytesDownUrl,proto3" json:"bytesDownUrl,omitempty"`
	Uint32DownIp   []int32 `protobuf:"varint,6,rep,packed,name=uint32DownIp,proto3" json:"uint32DownIp,omitempty"`
	Uint32DownPort []int32 `protobuf:"varint,7,rep,packed,name=uint32DownPort,proto3" json:"uint32DownPort,omitempty"`
	DownDomain     []byte  `protobuf:"bytes,8,opt,name=downDomain,proto3" json:"downDomain,omitempty"`
	DownPara       []byte  `protobuf:"bytes,9,opt,name=downPara,proto3" json:"downPara,omitempty"`
	//int64 fileId = 10;
	TransferType int32 `protobuf:"varint,11,opt,name=transferType,proto3" json:"transferType,omitempty"`
	AllowRetry   int32 `protobuf:"varint,12,opt,name=allowRetry,proto3" json:"allowRetry,omitempty"`
	//repeated IPv6Info msgDownIp6 = 26;
	ClientIp6 []byte `protobuf:"bytes,27,opt,name=clientIp6,proto3" json:"clientIp6,omitempty"`
	StrDomain string `protobuf:"bytes,28,opt,name=strDomain,proto3" json:"strDomain,omitempty"`
}

func (x *GetPttUrlRsp) Reset() {
	*x = GetPttUrlRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPttUrlRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPttUrlRsp) ProtoMessage() {}

func (x *GetPttUrlRsp) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPttUrlRsp.ProtoReflect.Descriptor instead.
func (*GetPttUrlRsp) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{7}
}

func (x *GetPttUrlRsp) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *GetPttUrlRsp) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *GetPttUrlRsp) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetPttUrlRsp) GetFailMsg() []byte {
	if x != nil {
		return x.FailMsg
	}
	return nil
}

func (x *GetPttUrlRsp) GetBytesDownUrl() []byte {
	if x != nil {
		return x.BytesDownUrl
	}
	return nil
}

func (x *GetPttUrlRsp) GetUint32DownIp() []int32 {
	if x != nil {
		return x.Uint32DownIp
	}
	return nil
}

func (x *GetPttUrlRsp) GetUint32DownPort() []int32 {
	if x != nil {
		return x.Uint32DownPort
	}
	return nil
}

func (x *GetPttUrlRsp) GetDownDomain() []byte {
	if x != nil {
		return x.DownDomain
	}
	return nil
}

func (x *GetPttUrlRsp) GetDownPara() []byte {
	if x != nil {
		return x.DownPara
	}
	return nil
}

func (x *GetPttUrlRsp) GetTransferType() int32 {
	if x != nil {
		return x.TransferType
	}
	return 0
}

func (x *GetPttUrlRsp) GetAllowRetry() int32 {
	if x != nil {
		return x.AllowRetry
	}
	return 0
}

func (x *GetPttUrlRsp) GetClientIp6() []byte {
	if x != nil {
		return x.ClientIp6
	}
	return nil
}

func (x *GetPttUrlRsp) GetStrDomain() string {
	if x != nil {
		return x.StrDomain
	}
	return ""
}

type ReqDataHighwayHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgBasehead   *DataHighwayHead `protobuf:"bytes,1,opt,name=msgBasehead,proto3" json:"msgBasehead,omitempty"`
	MsgSeghead    *SegHead         `protobuf:"bytes,2,opt,name=msgSeghead,proto3" json:"msgSeghead,omitempty"`
	ReqExtendinfo []byte           `protobuf:"bytes,3,opt,name=reqExtendinfo,proto3" json:"reqExtendinfo,omitempty"`
	Timestamp     int64            `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //LoginSigHead? msgLoginSigHead = 5;
}

func (x *ReqDataHighwayHead) Reset() {
	*x = ReqDataHighwayHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDataHighwayHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDataHighwayHead) ProtoMessage() {}

func (x *ReqDataHighwayHead) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDataHighwayHead.ProtoReflect.Descriptor instead.
func (*ReqDataHighwayHead) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{8}
}

func (x *ReqDataHighwayHead) GetMsgBasehead() *DataHighwayHead {
	if x != nil {
		return x.MsgBasehead
	}
	return nil
}

func (x *ReqDataHighwayHead) GetMsgSeghead() *SegHead {
	if x != nil {
		return x.MsgSeghead
	}
	return nil
}

func (x *ReqDataHighwayHead) GetReqExtendinfo() []byte {
	if x != nil {
		return x.ReqExtendinfo
	}
	return nil
}

func (x *ReqDataHighwayHead) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type RspDataHighwayHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgBasehead   *DataHighwayHead `protobuf:"bytes,1,opt,name=msgBasehead,proto3" json:"msgBasehead,omitempty"`
	MsgSeghead    *SegHead         `protobuf:"bytes,2,opt,name=msgSeghead,proto3" json:"msgSeghead,omitempty"`
	ErrorCode     int32            `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	AllowRetry    int32            `protobuf:"varint,4,opt,name=allowRetry,proto3" json:"allowRetry,omitempty"`
	Cachecost     int32            `protobuf:"varint,5,opt,name=cachecost,proto3" json:"cachecost,omitempty"`
	Htcost        int32            `protobuf:"varint,6,opt,name=htcost,proto3" json:"htcost,omitempty"`
	RspExtendinfo []byte           `protobuf:"bytes,7,opt,name=rspExtendinfo,proto3" json:"rspExtendinfo,omitempty"`
	Timestamp     int64            `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Range         int64            `protobuf:"varint,9,opt,name=range,proto3" json:"range,omitempty"`
	IsReset       int32            `protobuf:"varint,10,opt,name=isReset,proto3" json:"isReset,omitempty"`
}

func (x *RspDataHighwayHead) Reset() {
	*x = RspDataHighwayHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDataHighwayHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDataHighwayHead) ProtoMessage() {}

func (x *RspDataHighwayHead) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDataHighwayHead.ProtoReflect.Descriptor instead.
func (*RspDataHighwayHead) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9}
}

func (x *RspDataHighwayHead) GetMsgBasehead() *DataHighwayHead {
	if x != nil {
		return x.MsgBasehead
	}
	return nil
}

func (x *RspDataHighwayHead) GetMsgSeghead() *SegHead {
	if x != nil {
		return x.MsgSeghead
	}
	return nil
}

func (x *RspDataHighwayHead) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *RspDataHighwayHead) GetAllowRetry() int32 {
	if x != nil {
		return x.AllowRetry
	}
	return 0
}

func (x *RspDataHighwayHead) GetCachecost() int32 {
	if x != nil {
		return x.Cachecost
	}
	return 0
}

func (x *RspDataHighwayHead) GetHtcost() int32 {
	if x != nil {
		return x.Htcost
	}
	return 0
}

func (x *RspDataHighwayHead) GetRspExtendinfo() []byte {
	if x != nil {
		return x.RspExtendinfo
	}
	return nil
}

func (x *RspDataHighwayHead) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RspDataHighwayHead) GetRange() int64 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *RspDataHighwayHead) GetIsReset() int32 {
	if x != nil {
		return x.IsReset
	}
	return 0
}

type DataHighwayHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Uin        string `protobuf:"bytes,2,opt,name=uin,proto3" json:"uin,omitempty"`
	Command    string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	Seq        int32  `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
	RetryTimes int32  `protobuf:"varint,5,opt,name=retryTimes,proto3" json:"retryTimes,omitempty"`
	Appid      int32  `protobuf:"varint,6,opt,name=appid,proto3" json:"appid,omitempty"`
	Dataflag   int32  `protobuf:"varint,7,opt,name=dataflag,proto3" json:"dataflag,omitempty"`
	CommandId  int32  `protobuf:"varint,8,opt,name=commandId,proto3" json:"commandId,omitempty"`
	BuildVer   string `protobuf:"bytes,9,opt,name=buildVer,proto3" json:"buildVer,omitempty"`
	LocaleId   int32  `protobuf:"varint,10,opt,name=localeId,proto3" json:"localeId,omitempty"`
}

func (x *DataHighwayHead) Reset() {
	*x = DataHighwayHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataHighwayHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataHighwayHead) ProtoMessage() {}

func (x *DataHighwayHead) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataHighwayHead.ProtoReflect.Descriptor instead.
func (*DataHighwayHead) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{10}
}

func (x *DataHighwayHead) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DataHighwayHead) GetUin() string {
	if x != nil {
		return x.Uin
	}
	return ""
}

func (x *DataHighwayHead) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *DataHighwayHead) GetSeq() int32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *DataHighwayHead) GetRetryTimes() int32 {
	if x != nil {
		return x.RetryTimes
	}
	return 0
}

func (x *DataHighwayHead) GetAppid() int32 {
	if x != nil {
		return x.Appid
	}
	return 0
}

func (x *DataHighwayHead) GetDataflag() int32 {
	if x != nil {
		return x.Dataflag
	}
	return 0
}

func (x *DataHighwayHead) GetCommandId() int32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (x *DataHighwayHead) GetBuildVer() string {
	if x != nil {
		return x.BuildVer
	}
	return ""
}

func (x *DataHighwayHead) GetLocaleId() int32 {
	if x != nil {
		return x.LocaleId
	}
	return 0
}

type SegHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serviceid     int32  `protobuf:"varint,1,opt,name=serviceid,proto3" json:"serviceid,omitempty"`
	Filesize      int64  `protobuf:"varint,2,opt,name=filesize,proto3" json:"filesize,omitempty"`
	Dataoffset    int64  `protobuf:"varint,3,opt,name=dataoffset,proto3" json:"dataoffset,omitempty"`
	Datalength    int32  `protobuf:"varint,4,opt,name=datalength,proto3" json:"datalength,omitempty"`
	Rtcode        int32  `protobuf:"varint,5,opt,name=rtcode,proto3" json:"rtcode,omitempty"`
	Serviceticket []byte `protobuf:"bytes,6,opt,name=serviceticket,proto3" json:"serviceticket,omitempty"`
	Flag          int32  `protobuf:"varint,7,opt,name=flag,proto3" json:"flag,omitempty"`
	Md5           []byte `protobuf:"bytes,8,opt,name=md5,proto3" json:"md5,omitempty"`
	FileMd5       []byte `protobuf:"bytes,9,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	CacheAddr     int32  `protobuf:"varint,10,opt,name=cacheAddr,proto3" json:"cacheAddr,omitempty"`
	QueryTimes    int32  `protobuf:"varint,11,opt,name=queryTimes,proto3" json:"queryTimes,omitempty"`
	UpdateCacheip int32  `protobuf:"varint,12,opt,name=updateCacheip,proto3" json:"updateCacheip,omitempty"`
}

func (x *SegHead) Reset() {
	*x = SegHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegHead) ProtoMessage() {}

func (x *SegHead) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegHead.ProtoReflect.Descriptor instead.
func (*SegHead) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{11}
}

func (x *SegHead) GetServiceid() int32 {
	if x != nil {
		return x.Serviceid
	}
	return 0
}

func (x *SegHead) GetFilesize() int64 {
	if x != nil {
		return x.Filesize
	}
	return 0
}

func (x *SegHead) GetDataoffset() int64 {
	if x != nil {
		return x.Dataoffset
	}
	return 0
}

func (x *SegHead) GetDatalength() int32 {
	if x != nil {
		return x.Datalength
	}
	return 0
}

func (x *SegHead) GetRtcode() int32 {
	if x != nil {
		return x.Rtcode
	}
	return 0
}

func (x *SegHead) GetServiceticket() []byte {
	if x != nil {
		return x.Serviceticket
	}
	return nil
}

func (x *SegHead) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *SegHead) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *SegHead) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *SegHead) GetCacheAddr() int32 {
	if x != nil {
		return x.CacheAddr
	}
	return 0
}

func (x *SegHead) GetQueryTimes() int32 {
	if x != nil {
		return x.QueryTimes
	}
	return 0
}

func (x *SegHead) GetUpdateCacheip() int32 {
	if x != nil {
		return x.UpdateCacheip
	}
	return 0
}

type TryUpImgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCode    int64  `protobuf:"varint,1,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	SrcUin       int64  `protobuf:"varint,2,opt,name=srcUin,proto3" json:"srcUin,omitempty"`
	FileId       int64  `protobuf:"varint,3,opt,name=fileId,proto3" json:"fileId,omitempty"`
	FileMd5      []byte `protobuf:"bytes,4,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	FileSize     int64  `protobuf:"varint,5,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	FileName     string `protobuf:"bytes,6,opt,name=fileName,proto3" json:"fileName,omitempty"`
	SrcTerm      int32  `protobuf:"varint,7,opt,name=srcTerm,proto3" json:"srcTerm,omitempty"`
	PlatformType int32  `protobuf:"varint,8,opt,name=platformType,proto3" json:"platformType,omitempty"`
	BuType       int32  `protobuf:"varint,9,opt,name=buType,proto3" json:"buType,omitempty"`
	PicWidth     int32  `protobuf:"varint,10,opt,name=picWidth,proto3" json:"picWidth,omitempty"`
	PicHeight    int32  `protobuf:"varint,11,opt,name=picHeight,proto3" json:"picHeight,omitempty"`
	PicType      int32  `protobuf:"varint,12,opt,name=picType,proto3" json:"picType,omitempty"`
	BuildVer     string `protobuf:"bytes,13,opt,name=buildVer,proto3" json:"buildVer,omitempty"`
	InnerIp      int32  `protobuf:"varint,14,opt,name=innerIp,proto3" json:"innerIp,omitempty"`
	AppPicType   int32  `protobuf:"varint,15,opt,name=appPicType,proto3" json:"appPicType,omitempty"`
	OriginalPic  int32  `protobuf:"varint,16,opt,name=originalPic,proto3" json:"originalPic,omitempty"`
	FileIndex    []byte `protobuf:"bytes,17,opt,name=fileIndex,proto3" json:"fileIndex,omitempty"`
	DstUin       int64  `protobuf:"varint,18,opt,name=dstUin,proto3" json:"dstUin,omitempty"`
	SrvUpload    int32  `protobuf:"varint,19,opt,name=srvUpload,proto3" json:"srvUpload,omitempty"`
	TransferUrl  []byte `protobuf:"bytes,20,opt,name=transferUrl,proto3" json:"transferUrl,omitempty"`
}

func (x *TryUpImgReq) Reset() {
	*x = TryUpImgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryUpImgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryUpImgReq) ProtoMessage() {}

func (x *TryUpImgReq) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryUpImgReq.ProtoReflect.Descriptor instead.
func (*TryUpImgReq) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{12}
}

func (x *TryUpImgReq) GetGroupCode() int64 {
	if x != nil {
		return x.GroupCode
	}
	return 0
}

func (x *TryUpImgReq) GetSrcUin() int64 {
	if x != nil {
		return x.SrcUin
	}
	return 0
}

func (x *TryUpImgReq) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *TryUpImgReq) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *TryUpImgReq) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *TryUpImgReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TryUpImgReq) GetSrcTerm() int32 {
	if x != nil {
		return x.SrcTerm
	}
	return 0
}

func (x *TryUpImgReq) GetPlatformType() int32 {
	if x != nil {
		return x.PlatformType
	}
	return 0
}

func (x *TryUpImgReq) GetBuType() int32 {
	if x != nil {
		return x.BuType
	}
	return 0
}

func (x *TryUpImgReq) GetPicWidth() int32 {
	if x != nil {
		return x.PicWidth
	}
	return 0
}

func (x *TryUpImgReq) GetPicHeight() int32 {
	if x != nil {
		return x.PicHeight
	}
	return 0
}

func (x *TryUpImgReq) GetPicType() int32 {
	if x != nil {
		return x.PicType
	}
	return 0
}

func (x *TryUpImgReq) GetBuildVer() string {
	if x != nil {
		return x.BuildVer
	}
	return ""
}

func (x *TryUpImgReq) GetInnerIp() int32 {
	if x != nil {
		return x.InnerIp
	}
	return 0
}

func (x *TryUpImgReq) GetAppPicType() int32 {
	if x != nil {
		return x.AppPicType
	}
	return 0
}

func (x *TryUpImgReq) GetOriginalPic() int32 {
	if x != nil {
		return x.OriginalPic
	}
	return 0
}

func (x *TryUpImgReq) GetFileIndex() []byte {
	if x != nil {
		return x.FileIndex
	}
	return nil
}

func (x *TryUpImgReq) GetDstUin() int64 {
	if x != nil {
		return x.DstUin
	}
	return 0
}

func (x *TryUpImgReq) GetSrvUpload() int32 {
	if x != nil {
		return x.SrvUpload
	}
	return 0
}

func (x *TryUpImgReq) GetTransferUrl() []byte {
	if x != nil {
		return x.TransferUrl
	}
	return nil
}

type TryUpImgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId       int64    `protobuf:"varint,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	Result       int32    `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	FailMsg      string   `protobuf:"bytes,3,opt,name=failMsg,proto3" json:"failMsg,omitempty"`
	BoolFileExit bool     `protobuf:"varint,4,opt,name=boolFileExit,proto3" json:"boolFileExit,omitempty"`
	MsgImgInfo   *ImgInfo `protobuf:"bytes,5,opt,name=msgImgInfo,proto3" json:"msgImgInfo,omitempty"`
	Uint32UpIp   []int32  `protobuf:"varint,6,rep,packed,name=uint32UpIp,proto3" json:"uint32UpIp,omitempty"`
	Uint32UpPort []int32  `protobuf:"varint,7,rep,packed,name=uint32UpPort,proto3" json:"uint32UpPort,omitempty"`
	UpUkey       []byte   `protobuf:"bytes,8,opt,name=upUkey,proto3" json:"upUkey,omitempty"`
	Fid          int64    `protobuf:"varint,9,opt,name=fid,proto3" json:"fid,omitempty"`
}

func (x *TryUpImgResp) Reset() {
	*x = TryUpImgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryUpImgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryUpImgResp) ProtoMessage() {}

func (x *TryUpImgResp) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryUpImgResp.ProtoReflect.Descriptor instead.
func (*TryUpImgResp) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{13}
}

func (x *TryUpImgResp) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *TryUpImgResp) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *TryUpImgResp) GetFailMsg() string {
	if x != nil {
		return x.FailMsg
	}
	return ""
}

func (x *TryUpImgResp) GetBoolFileExit() bool {
	if x != nil {
		return x.BoolFileExit
	}
	return false
}

func (x *TryUpImgResp) GetMsgImgInfo() *ImgInfo {
	if x != nil {
		return x.MsgImgInfo
	}
	return nil
}

func (x *TryUpImgResp) GetUint32UpIp() []int32 {
	if x != nil {
		return x.Uint32UpIp
	}
	return nil
}

func (x *TryUpImgResp) GetUint32UpPort() []int32 {
	if x != nil {
		return x.Uint32UpPort
	}
	return nil
}

func (x *TryUpImgResp) GetUpUkey() []byte {
	if x != nil {
		return x.UpUkey
	}
	return nil
}

func (x *TryUpImgResp) GetFid() int64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

type TryUpPttReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCode     int64  `protobuf:"varint,1,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	SrcUin        int64  `protobuf:"varint,2,opt,name=srcUin,proto3" json:"srcUin,omitempty"`
	FileId        int64  `protobuf:"varint,3,opt,name=fileId,proto3" json:"fileId,omitempty"`
	FileMd5       []byte `protobuf:"bytes,4,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	FileSize      int64  `protobuf:"varint,5,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	FileName      []byte `protobuf:"bytes,6,opt,name=fileName,proto3" json:"fileName,omitempty"`
	SrcTerm       int32  `protobuf:"varint,7,opt,name=srcTerm,proto3" json:"srcTerm,omitempty"`
	PlatformType  int32  `protobuf:"varint,8,opt,name=platformType,proto3" json:"platformType,omitempty"`
	BuType        int32  `protobuf:"varint,9,opt,name=buType,proto3" json:"buType,omitempty"`
	BuildVer      string `protobuf:"bytes,10,opt,name=buildVer,proto3" json:"buildVer,omitempty"`
	InnerIp       int32  `protobuf:"varint,11,opt,name=innerIp,proto3" json:"innerIp,omitempty"`
	VoiceLength   int32  `protobuf:"varint,12,opt,name=voiceLength,proto3" json:"voiceLength,omitempty"`
	BoolNewUpChan bool   `protobuf:"varint,13,opt,name=boolNewUpChan,proto3" json:"boolNewUpChan,omitempty"`
	Codec         int32  `protobuf:"varint,14,opt,name=codec,proto3" json:"codec,omitempty"`
	VoiceType     int32  `protobuf:"varint,15,opt,name=voiceType,proto3" json:"voiceType,omitempty"`
	BuId          int32  `protobuf:"varint,16,opt,name=buId,proto3" json:"buId,omitempty"`
}

func (x *TryUpPttReq) Reset() {
	*x = TryUpPttReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryUpPttReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryUpPttReq) ProtoMessage() {}

func (x *TryUpPttReq) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryUpPttReq.ProtoReflect.Descriptor instead.
func (*TryUpPttReq) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{14}
}

func (x *TryUpPttReq) GetGroupCode() int64 {
	if x != nil {
		return x.GroupCode
	}
	return 0
}

func (x *TryUpPttReq) GetSrcUin() int64 {
	if x != nil {
		return x.SrcUin
	}
	return 0
}

func (x *TryUpPttReq) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *TryUpPttReq) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *TryUpPttReq) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *TryUpPttReq) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *TryUpPttReq) GetSrcTerm() int32 {
	if x != nil {
		return x.SrcTerm
	}
	return 0
}

func (x *TryUpPttReq) GetPlatformType() int32 {
	if x != nil {
		return x.PlatformType
	}
	return 0
}

func (x *TryUpPttReq) GetBuType() int32 {
	if x != nil {
		return x.BuType
	}
	return 0
}

func (x *TryUpPttReq) GetBuildVer() string {
	if x != nil {
		return x.BuildVer
	}
	return ""
}

func (x *TryUpPttReq) GetInnerIp() int32 {
	if x != nil {
		return x.InnerIp
	}
	return 0
}

func (x *TryUpPttReq) GetVoiceLength() int32 {
	if x != nil {
		return x.VoiceLength
	}
	return 0
}

func (x *TryUpPttReq) GetBoolNewUpChan() bool {
	if x != nil {
		return x.BoolNewUpChan
	}
	return false
}

func (x *TryUpPttReq) GetCodec() int32 {
	if x != nil {
		return x.Codec
	}
	return 0
}

func (x *TryUpPttReq) GetVoiceType() int32 {
	if x != nil {
		return x.VoiceType
	}
	return 0
}

func (x *TryUpPttReq) GetBuId() int32 {
	if x != nil {
		return x.BuId
	}
	return 0
}

type TryUpPttResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId       int64   `protobuf:"varint,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	Result       int32   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	FailMsg      string  `protobuf:"bytes,3,opt,name=failMsg,proto3" json:"failMsg,omitempty"`
	BoolFileExit bool    `protobuf:"varint,4,opt,name=boolFileExit,proto3" json:"boolFileExit,omitempty"`
	Uint32UpIp   []int32 `protobuf:"varint,5,rep,packed,name=uint32UpIp,proto3" json:"uint32UpIp,omitempty"`
	Uint32UpPort []int32 `protobuf:"varint,6,rep,packed,name=uint32UpPort,proto3" json:"uint32UpPort,omitempty"`
	UpUkey       []byte  `protobuf:"bytes,7,opt,name=upUkey,proto3" json:"upUkey,omitempty"`
	FileId2      int64   `protobuf:"varint,8,opt,name=fileId2,proto3" json:"fileId2,omitempty"`
	UpOffset     int64   `protobuf:"varint,9,opt,name=upOffset,proto3" json:"upOffset,omitempty"`
	BlockSize    int64   `protobuf:"varint,10,opt,name=blockSize,proto3" json:"blockSize,omitempty"`
	FileKey      []byte  `protobuf:"bytes,11,opt,name=fileKey,proto3" json:"fileKey,omitempty"`
	ChannelType  int32   `protobuf:"varint,12,opt,name=channelType,proto3" json:"channelType,omitempty"`
}

func (x *TryUpPttResp) Reset() {
	*x = TryUpPttResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryUpPttResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryUpPttResp) ProtoMessage() {}

func (x *TryUpPttResp) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryUpPttResp.ProtoReflect.Descriptor instead.
func (*TryUpPttResp) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{15}
}

func (x *TryUpPttResp) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *TryUpPttResp) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *TryUpPttResp) GetFailMsg() string {
	if x != nil {
		return x.FailMsg
	}
	return ""
}

func (x *TryUpPttResp) GetBoolFileExit() bool {
	if x != nil {
		return x.BoolFileExit
	}
	return false
}

func (x *TryUpPttResp) GetUint32UpIp() []int32 {
	if x != nil {
		return x.Uint32UpIp
	}
	return nil
}

func (x *TryUpPttResp) GetUint32UpPort() []int32 {
	if x != nil {
		return x.Uint32UpPort
	}
	return nil
}

func (x *TryUpPttResp) GetUpUkey() []byte {
	if x != nil {
		return x.UpUkey
	}
	return nil
}

func (x *TryUpPttResp) GetFileId2() int64 {
	if x != nil {
		return x.FileId2
	}
	return 0
}

func (x *TryUpPttResp) GetUpOffset() int64 {
	if x != nil {
		return x.UpOffset
	}
	return 0
}

func (x *TryUpPttResp) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TryUpPttResp) GetFileKey() []byte {
	if x != nil {
		return x.FileKey
	}
	return nil
}

func (x *TryUpPttResp) GetChannelType() int32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

type ImgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileMd5    []byte `protobuf:"bytes,1,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	FileType   int32  `protobuf:"varint,2,opt,name=fileType,proto3" json:"fileType,omitempty"`
	FileSize   int64  `protobuf:"varint,3,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	FileWidth  int32  `protobuf:"varint,4,opt,name=fileWidth,proto3" json:"fileWidth,omitempty"`
	FileHeight int32  `protobuf:"varint,5,opt,name=fileHeight,proto3" json:"fileHeight,omitempty"`
}

func (x *ImgInfo) Reset() {
	*x = ImgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImgInfo) ProtoMessage() {}

func (x *ImgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImgInfo.ProtoReflect.Descriptor instead.
func (*ImgInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{16}
}

func (x *ImgInfo) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *ImgInfo) GetFileType() int32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *ImgInfo) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ImgInfo) GetFileWidth() int32 {
	if x != nil {
		return x.FileWidth
	}
	return 0
}

func (x *ImgInfo) GetFileHeight() int32 {
	if x != nil {
		return x.FileHeight
	}
	return 0
}

type DeleteMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*MessageItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *DeleteMessageRequest) Reset() {
	*x = DeleteMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageRequest) ProtoMessage() {}

func (x *DeleteMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageRequest.ProtoReflect.Descriptor instead.
func (*DeleteMessageRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteMessageRequest) GetItems() []*MessageItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type MessageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUin int64  `protobuf:"varint,1,opt,name=fromUin,proto3" json:"fromUin,omitempty"`
	ToUin   int64  `protobuf:"varint,2,opt,name=toUin,proto3" json:"toUin,omitempty"`
	MsgType int32  `protobuf:"varint,3,opt,name=msgType,proto3" json:"msgType,omitempty"`
	MsgSeq  int32  `protobuf:"varint,4,opt,name=msgSeq,proto3" json:"msgSeq,omitempty"`
	MsgUid  int64  `protobuf:"varint,5,opt,name=msgUid,proto3" json:"msgUid,omitempty"`
	Sig     []byte `protobuf:"bytes,7,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *MessageItem) Reset() {
	*x = MessageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageItem) ProtoMessage() {}

func (x *MessageItem) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageItem.ProtoReflect.Descriptor instead.
func (*MessageItem) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{18}
}

func (x *MessageItem) GetFromUin() int64 {
	if x != nil {
		return x.FromUin
	}
	return 0
}

func (x *MessageItem) GetToUin() int64 {
	if x != nil {
		return x.ToUin
	}
	return 0
}

func (x *MessageItem) GetMsgType() int32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *MessageItem) GetMsgSeq() int32 {
	if x != nil {
		return x.MsgSeq
	}
	return 0
}

func (x *MessageItem) GetMsgUid() int64 {
	if x != nil {
		return x.MsgUid
	}
	return 0
}

func (x *MessageItem) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

type SubD4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin int64 `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
}

func (x *SubD4) Reset() {
	*x = SubD4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubD4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubD4) ProtoMessage() {}

func (x *SubD4) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubD4.ProtoReflect.Descriptor instead.
func (*SubD4) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{19}
}

func (x *SubD4) GetUin() int64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

type Sub8A struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgInfo         []*Sub8AMsgInfo `protobuf:"bytes,1,rep,name=msg_info,json=msgInfo,proto3" json:"msg_info,omitempty"`
	AppId           int32           `protobuf:"varint,2,opt,name=appId,proto3" json:"appId,omitempty"`
	InstId          int32           `protobuf:"varint,3,opt,name=instId,proto3" json:"instId,omitempty"`
	LongMessageFlag int32           `protobuf:"varint,4,opt,name=longMessageFlag,proto3" json:"longMessageFlag,omitempty"`
	Reserved        []byte          `protobuf:"bytes,5,opt,name=reserved,proto3" json:"reserved,omitempty"`
}

func (x *Sub8A) Reset() {
	*x = Sub8A{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sub8A) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sub8A) ProtoMessage() {}

func (x *Sub8A) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sub8A.ProtoReflect.Descriptor instead.
func (*Sub8A) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{20}
}

func (x *Sub8A) GetMsgInfo() []*Sub8AMsgInfo {
	if x != nil {
		return x.MsgInfo
	}
	return nil
}

func (x *Sub8A) GetAppId() int32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *Sub8A) GetInstId() int32 {
	if x != nil {
		return x.InstId
	}
	return 0
}

func (x *Sub8A) GetLongMessageFlag() int32 {
	if x != nil {
		return x.LongMessageFlag
	}
	return 0
}

func (x *Sub8A) GetReserved() []byte {
	if x != nil {
		return x.Reserved
	}
	return nil
}

type Sub8AMsgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUin   int64 `protobuf:"varint,1,opt,name=fromUin,proto3" json:"fromUin,omitempty"`
	ToUin     int64 `protobuf:"varint,2,opt,name=toUin,proto3" json:"toUin,omitempty"`
	MsgSeq    int32 `protobuf:"varint,3,opt,name=msgSeq,proto3" json:"msgSeq,omitempty"`
	MsgUid    int64 `protobuf:"varint,4,opt,name=msgUid,proto3" json:"msgUid,omitempty"`
	MsgTime   int64 `protobuf:"varint,5,opt,name=msgTime,proto3" json:"msgTime,omitempty"`
	MsgRandom int32 `protobuf:"varint,6,opt,name=msgRandom,proto3" json:"msgRandom,omitempty"`
	PkgNum    int32 `protobuf:"varint,7,opt,name=pkgNum,proto3" json:"pkgNum,omitempty"`
	PkgIndex  int32 `protobuf:"varint,8,opt,name=pkgIndex,proto3" json:"pkgIndex,omitempty"`
	DevSeq    int32 `protobuf:"varint,9,opt,name=devSeq,proto3" json:"devSeq,omitempty"`
}

func (x *Sub8AMsgInfo) Reset() {
	*x = Sub8AMsgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sub8AMsgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sub8AMsgInfo) ProtoMessage() {}

func (x *Sub8AMsgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sub8AMsgInfo.ProtoReflect.Descriptor instead.
func (*Sub8AMsgInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{21}
}

func (x *Sub8AMsgInfo) GetFromUin() int64 {
	if x != nil {
		return x.FromUin
	}
	return 0
}

func (x *Sub8AMsgInfo) GetToUin() int64 {
	if x != nil {
		return x.ToUin
	}
	return 0
}

func (x *Sub8AMsgInfo) GetMsgSeq() int32 {
	if x != nil {
		return x.MsgSeq
	}
	return 0
}

func (x *Sub8AMsgInfo) GetMsgUid() int64 {
	if x != nil {
		return x.MsgUid
	}
	return 0
}

func (x *Sub8AMsgInfo) GetMsgTime() int64 {
	if x != nil {
		return x.MsgTime
	}
	return 0
}

func (x *Sub8AMsgInfo) GetMsgRandom() int32 {
	if x != nil {
		return x.MsgRandom
	}
	return 0
}

func (x *Sub8AMsgInfo) GetPkgNum() int32 {
	if x != nil {
		return x.PkgNum
	}
	return 0
}

func (x *Sub8AMsgInfo) GetPkgIndex() int32 {
	if x != nil {
		return x.PkgIndex
	}
	return 0
}

func (x *Sub8AMsgInfo) GetDevSeq() int32 {
	if x != nil {
		return x.DevSeq
	}
	return 0
}

type SubB3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            int32              `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	MsgAddFrdNotify *SubB3AddFrdNotify `protobuf:"bytes,2,opt,name=msgAddFrdNotify,proto3" json:"msgAddFrdNotify,omitempty"`
}

func (x *SubB3) Reset() {
	*x = SubB3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubB3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubB3) ProtoMessage() {}

func (x *SubB3) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubB3.ProtoReflect.Descriptor instead.
func (*SubB3) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{22}
}

func (x *SubB3) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SubB3) GetMsgAddFrdNotify() *SubB3AddFrdNotify {
	if x != nil {
		return x.MsgAddFrdNotify
	}
	return nil
}

type SubB3AddFrdNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin  int64  `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
	Nick string `protobuf:"bytes,5,opt,name=nick,proto3" json:"nick,omitempty"`
}

func (x *SubB3AddFrdNotify) Reset() {
	*x = SubB3AddFrdNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubB3AddFrdNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubB3AddFrdNotify) ProtoMessage() {}

func (x *SubB3AddFrdNotify) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubB3AddFrdNotify.ProtoReflect.Descriptor instead.
func (*SubB3AddFrdNotify) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{23}
}

func (x *SubB3AddFrdNotify) GetUin() int64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *SubB3AddFrdNotify) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

type Sub44 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendSyncMsg *Sub44FriendSyncMsg `protobuf:"bytes,1,opt,name=friendSyncMsg,proto3" json:"friendSyncMsg,omitempty"`
	GroupSyncMsg  *Sub44GroupSyncMsg  `protobuf:"bytes,2,opt,name=groupSyncMsg,proto3" json:"groupSyncMsg,omitempty"`
}

func (x *Sub44) Reset() {
	*x = Sub44{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sub44) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sub44) ProtoMessage() {}

func (x *Sub44) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sub44.ProtoReflect.Descriptor instead.
func (*Sub44) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{24}
}

func (x *Sub44) GetFriendSyncMsg() *Sub44FriendSyncMsg {
	if x != nil {
		return x.FriendSyncMsg
	}
	return nil
}

func (x *Sub44) GetGroupSyncMsg() *Sub44GroupSyncMsg {
	if x != nil {
		return x.GroupSyncMsg
	}
	return nil
}

type Sub44FriendSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin         int64    `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
	FUin        int64    `protobuf:"varint,2,opt,name=fUin,proto3" json:"fUin,omitempty"`
	ProcessType int32    `protobuf:"varint,3,opt,name=processType,proto3" json:"processType,omitempty"`
	Time        int32    `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	ProcessFlag int32    `protobuf:"varint,5,opt,name=processFlag,proto3" json:"processFlag,omitempty"`
	SourceId    int32    `protobuf:"varint,6,opt,name=sourceId,proto3" json:"sourceId,omitempty"`
	SourceSubId int32    `protobuf:"varint,7,opt,name=sourceSubId,proto3" json:"sourceSubId,omitempty"`
	StrWording  []string `protobuf:"bytes,8,rep,name=strWording,proto3" json:"strWording,omitempty"`
}

func (x *Sub44FriendSyncMsg) Reset() {
	*x = Sub44FriendSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sub44FriendSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sub44FriendSyncMsg) ProtoMessage() {}

func (x *Sub44FriendSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sub44FriendSyncMsg.ProtoReflect.Descriptor instead.
func (*Sub44FriendSyncMsg) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{25}
}

func (x *Sub44FriendSyncMsg) GetUin() int64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *Sub44FriendSyncMsg) GetFUin() int64 {
	if x != nil {
		return x.FUin
	}
	return 0
}

func (x *Sub44FriendSyncMsg) GetProcessType() int32 {
	if x != nil {
		return x.ProcessType
	}
	return 0
}

func (x *Sub44FriendSyncMsg) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Sub44FriendSyncMsg) GetProcessFlag() int32 {
	if x != nil {
		return x.ProcessFlag
	}
	return 0
}

func (x *Sub44FriendSyncMsg) GetSourceId() int32 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

func (x *Sub44FriendSyncMsg) GetSourceSubId() int32 {
	if x != nil {
		return x.SourceSubId
	}
	return 0
}

func (x *Sub44FriendSyncMsg) GetStrWording() []string {
	if x != nil {
		return x.StrWording
	}
	return nil
}

type Sub44GroupSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType         int32  `protobuf:"varint,1,opt,name=msgType,proto3" json:"msgType,omitempty"`
	MsgSeq          int64  `protobuf:"varint,2,opt,name=msgSeq,proto3" json:"msgSeq,omitempty"`
	GrpCode         int64  `protobuf:"varint,3,opt,name=grpCode,proto3" json:"grpCode,omitempty"`
	GaCode          int64  `protobuf:"varint,4,opt,name=gaCode,proto3" json:"gaCode,omitempty"`
	OptUin1         int64  `protobuf:"varint,5,opt,name=optUin1,proto3" json:"optUin1,omitempty"`
	OptUin2         int64  `protobuf:"varint,6,opt,name=optUin2,proto3" json:"optUin2,omitempty"`
	MsgBuf          []byte `protobuf:"bytes,7,opt,name=msgBuf,proto3" json:"msgBuf,omitempty"`
	AuthKey         []byte `protobuf:"bytes,8,opt,name=authKey,proto3" json:"authKey,omitempty"`
	MsgStatus       int32  `protobuf:"varint,9,opt,name=msgStatus,proto3" json:"msgStatus,omitempty"`
	ActionUin       int64  `protobuf:"varint,10,opt,name=actionUin,proto3" json:"actionUin,omitempty"`
	ActionTime      int64  `protobuf:"varint,11,opt,name=actionTime,proto3" json:"actionTime,omitempty"`
	CurMaxMemCount  int32  `protobuf:"varint,12,opt,name=curMaxMemCount,proto3" json:"curMaxMemCount,omitempty"`
	NextMaxMemCount int32  `protobuf:"varint,13,opt,name=nextMaxMemCount,proto3" json:"nextMaxMemCount,omitempty"`
	CurMemCount     int32  `protobuf:"varint,14,opt,name=curMemCount,proto3" json:"curMemCount,omitempty"`
	ReqSrcId        int32  `protobuf:"varint,15,opt,name=reqSrcId,proto3" json:"reqSrcId,omitempty"`
	ReqSrcSubId     int32  `protobuf:"varint,16,opt,name=reqSrcSubId,proto3" json:"reqSrcSubId,omitempty"`
	InviterRole     int32  `protobuf:"varint,17,opt,name=inviterRole,proto3" json:"inviterRole,omitempty"`
	ExtAdminNum     int32  `protobuf:"varint,18,opt,name=extAdminNum,proto3" json:"extAdminNum,omitempty"`
	ProcessFlag     int32  `protobuf:"varint,19,opt,name=processFlag,proto3" json:"processFlag,omitempty"`
}

func (x *Sub44GroupSyncMsg) Reset() {
	*x = Sub44GroupSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sub44GroupSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sub44GroupSyncMsg) ProtoMessage() {}

func (x *Sub44GroupSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sub44GroupSyncMsg.ProtoReflect.Descriptor instead.
func (*Sub44GroupSyncMsg) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{26}
}

func (x *Sub44GroupSyncMsg) GetMsgType() int32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetMsgSeq() int64 {
	if x != nil {
		return x.MsgSeq
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetGrpCode() int64 {
	if x != nil {
		return x.GrpCode
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetGaCode() int64 {
	if x != nil {
		return x.GaCode
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetOptUin1() int64 {
	if x != nil {
		return x.OptUin1
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetOptUin2() int64 {
	if x != nil {
		return x.OptUin2
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetMsgBuf() []byte {
	if x != nil {
		return x.MsgBuf
	}
	return nil
}

func (x *Sub44GroupSyncMsg) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *Sub44GroupSyncMsg) GetMsgStatus() int32 {
	if x != nil {
		return x.MsgStatus
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetActionUin() int64 {
	if x != nil {
		return x.ActionUin
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetActionTime() int64 {
	if x != nil {
		return x.ActionTime
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetCurMaxMemCount() int32 {
	if x != nil {
		return x.CurMaxMemCount
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetNextMaxMemCount() int32 {
	if x != nil {
		return x.NextMaxMemCount
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetCurMemCount() int32 {
	if x != nil {
		return x.CurMemCount
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetReqSrcId() int32 {
	if x != nil {
		return x.ReqSrcId
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetReqSrcSubId() int32 {
	if x != nil {
		return x.ReqSrcSubId
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetInviterRole() int32 {
	if x != nil {
		return x.InviterRole
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetExtAdminNum() int32 {
	if x != nil {
		return x.ExtAdminNum
	}
	return 0
}

func (x *Sub44GroupSyncMsg) GetProcessFlag() int32 {
	if x != nil {
		return x.ProcessFlag
	}
	return 0
}

type GroupMemberReqBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCode       int64 `protobuf:"varint,1,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	Uin             int64 `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	NewClient       bool  `protobuf:"varint,3,opt,name=newClient,proto3" json:"newClient,omitempty"`
	ClientType      int32 `protobuf:"varint,4,opt,name=clientType,proto3" json:"clientType,omitempty"`
	RichCardNameVer int32 `protobuf:"varint,5,opt,name=richCardNameVer,proto3" json:"richCardNameVer,omitempty"`
}

func (x *GroupMemberReqBody) Reset() {
	*x = GroupMemberReqBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberReqBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberReqBody) ProtoMessage() {}

func (x *GroupMemberReqBody) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberReqBody.ProtoReflect.Descriptor instead.
func (*GroupMemberReqBody) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{27}
}

func (x *GroupMemberReqBody) GetGroupCode() int64 {
	if x != nil {
		return x.GroupCode
	}
	return 0
}

func (x *GroupMemberReqBody) GetUin() int64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *GroupMemberReqBody) GetNewClient() bool {
	if x != nil {
		return x.NewClient
	}
	return false
}

func (x *GroupMemberReqBody) GetClientType() int32 {
	if x != nil {
		return x.ClientType
	}
	return 0
}

func (x *GroupMemberReqBody) GetRichCardNameVer() int32 {
	if x != nil {
		return x.RichCardNameVer
	}
	return 0
}

type GroupMemberRspBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCode              int64            `protobuf:"varint,1,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	SelfRole               int32            `protobuf:"varint,2,opt,name=selfRole,proto3" json:"selfRole,omitempty"`
	MemInfo                *GroupMemberInfo `protobuf:"bytes,3,opt,name=memInfo,proto3" json:"memInfo,omitempty"`
	BoolSelfLocationShared bool             `protobuf:"varint,4,opt,name=boolSelfLocationShared,proto3" json:"boolSelfLocationShared,omitempty"`
	GroupType              int32            `protobuf:"varint,5,opt,name=groupType,proto3" json:"groupType,omitempty"`
}

func (x *GroupMemberRspBody) Reset() {
	*x = GroupMemberRspBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberRspBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberRspBody) ProtoMessage() {}

func (x *GroupMemberRspBody) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberRspBody.ProtoReflect.Descriptor instead.
func (*GroupMemberRspBody) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{28}
}

func (x *GroupMemberRspBody) GetGroupCode() int64 {
	if x != nil {
		return x.GroupCode
	}
	return 0
}

func (x *GroupMemberRspBody) GetSelfRole() int32 {
	if x != nil {
		return x.SelfRole
	}
	return 0
}

func (x *GroupMemberRspBody) GetMemInfo() *GroupMemberInfo {
	if x != nil {
		return x.MemInfo
	}
	return nil
}

func (x *GroupMemberRspBody) GetBoolSelfLocationShared() bool {
	if x != nil {
		return x.BoolSelfLocationShared
	}
	return false
}

func (x *GroupMemberRspBody) GetGroupType() int32 {
	if x != nil {
		return x.GroupType
	}
	return 0
}

type GroupMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin         int64  `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
	Result      int32  `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Errmsg      []byte `protobuf:"bytes,3,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	IsFriend    bool   `protobuf:"varint,4,opt,name=IsFriend,proto3" json:"IsFriend,omitempty"`
	Remark      []byte `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`
	IsConcerned bool   `protobuf:"varint,6,opt,name=IsConcerned,proto3" json:"IsConcerned,omitempty"`
	Credit      int32  `protobuf:"varint,7,opt,name=credit,proto3" json:"credit,omitempty"`
	Card        []byte `protobuf:"bytes,8,opt,name=card,proto3" json:"card,omitempty"`
	Sex         int32  `protobuf:"varint,9,opt,name=sex,proto3" json:"sex,omitempty"`
	Location    []byte `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	Nick        []byte `protobuf:"bytes,11,opt,name=nick,proto3" json:"nick,omitempty"`
	Age         int32  `protobuf:"varint,12,opt,name=age,proto3" json:"age,omitempty"`
	Lev         []byte `protobuf:"bytes,13,opt,name=lev,proto3" json:"lev,omitempty"`
	Join        int64  `protobuf:"varint,14,opt,name=join,proto3" json:"join,omitempty"`
	LastSpeak   int64  `protobuf:"varint,15,opt,name=lastSpeak,proto3" json:"lastSpeak,omitempty"`
	//repeated CustomEntry customEnties = 16;
	//repeated GBarInfo gbarConcerned = 17;
	GbarTitle              []byte `protobuf:"bytes,18,opt,name=gbarTitle,proto3" json:"gbarTitle,omitempty"`
	GbarUrl                []byte `protobuf:"bytes,19,opt,name=gbarUrl,proto3" json:"gbarUrl,omitempty"`
	GbarCnt                int32  `protobuf:"varint,20,opt,name=gbarCnt,proto3" json:"gbarCnt,omitempty"`
	IsAllowModCard         bool   `protobuf:"varint,21,opt,name=isAllowModCard,proto3" json:"isAllowModCard,omitempty"`
	IsVip                  bool   `protobuf:"varint,22,opt,name=isVip,proto3" json:"isVip,omitempty"`
	IsYearVip              bool   `protobuf:"varint,23,opt,name=isYearVip,proto3" json:"isYearVip,omitempty"`
	IsSuperVip             bool   `protobuf:"varint,24,opt,name=isSuperVip,proto3" json:"isSuperVip,omitempty"`
	IsSuperQq              bool   `protobuf:"varint,25,opt,name=isSuperQq,proto3" json:"isSuperQq,omitempty"`
	VipLev                 int32  `protobuf:"varint,26,opt,name=vipLev,proto3" json:"vipLev,omitempty"`
	Role                   int32  `protobuf:"varint,27,opt,name=role,proto3" json:"role,omitempty"`
	LocationShared         bool   `protobuf:"varint,28,opt,name=locationShared,proto3" json:"locationShared,omitempty"`
	Int64Distance          int64  `protobuf:"varint,29,opt,name=int64Distance,proto3" json:"int64Distance,omitempty"`
	ConcernType            int32  `protobuf:"varint,30,opt,name=concernType,proto3" json:"concernType,omitempty"`
	SpecialTitle           []byte `protobuf:"bytes,31,opt,name=specialTitle,proto3" json:"specialTitle,omitempty"`
	SpecialTitleExpireTime int32  `protobuf:"varint,32,opt,name=specialTitleExpireTime,proto3" json:"specialTitleExpireTime,omitempty"`
	//FlowersEntry flowerEntry = 33;
	//TeamEntry teamEntry = 34;
	PhoneNum []byte `protobuf:"bytes,35,opt,name=phoneNum,proto3" json:"phoneNum,omitempty"`
	Job      []byte `protobuf:"bytes,36,opt,name=job,proto3" json:"job,omitempty"`
	MedalId  int32  `protobuf:"varint,37,opt,name=medalId,proto3" json:"medalId,omitempty"`
	Level    int32  `protobuf:"varint,39,opt,name=level,proto3" json:"level,omitempty"`
	Honor    string `protobuf:"bytes,41,opt,name=honor,proto3" json:"honor,omitempty"`
}

func (x *GroupMemberInfo) Reset() {
	*x = GroupMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberInfo) ProtoMessage() {}

func (x *GroupMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberInfo.ProtoReflect.Descriptor instead.
func (*GroupMemberInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{29}
}

func (x *GroupMemberInfo) GetUin() int64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *GroupMemberInfo) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GroupMemberInfo) GetErrmsg() []byte {
	if x != nil {
		return x.Errmsg
	}
	return nil
}

func (x *GroupMemberInfo) GetIsFriend() bool {
	if x != nil {
		return x.IsFriend
	}
	return false
}

func (x *GroupMemberInfo) GetRemark() []byte {
	if x != nil {
		return x.Remark
	}
	return nil
}

func (x *GroupMemberInfo) GetIsConcerned() bool {
	if x != nil {
		return x.IsConcerned
	}
	return false
}

func (x *GroupMemberInfo) GetCredit() int32 {
	if x != nil {
		return x.Credit
	}
	return 0
}

func (x *GroupMemberInfo) GetCard() []byte {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *GroupMemberInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *GroupMemberInfo) GetLocation() []byte {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GroupMemberInfo) GetNick() []byte {
	if x != nil {
		return x.Nick
	}
	return nil
}

func (x *GroupMemberInfo) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *GroupMemberInfo) GetLev() []byte {
	if x != nil {
		return x.Lev
	}
	return nil
}

func (x *GroupMemberInfo) GetJoin() int64 {
	if x != nil {
		return x.Join
	}
	return 0
}

func (x *GroupMemberInfo) GetLastSpeak() int64 {
	if x != nil {
		return x.LastSpeak
	}
	return 0
}

func (x *GroupMemberInfo) GetGbarTitle() []byte {
	if x != nil {
		return x.GbarTitle
	}
	return nil
}

func (x *GroupMemberInfo) GetGbarUrl() []byte {
	if x != nil {
		return x.GbarUrl
	}
	return nil
}

func (x *GroupMemberInfo) GetGbarCnt() int32 {
	if x != nil {
		return x.GbarCnt
	}
	return 0
}

func (x *GroupMemberInfo) GetIsAllowModCard() bool {
	if x != nil {
		return x.IsAllowModCard
	}
	return false
}

func (x *GroupMemberInfo) GetIsVip() bool {
	if x != nil {
		return x.IsVip
	}
	return false
}

func (x *GroupMemberInfo) GetIsYearVip() bool {
	if x != nil {
		return x.IsYearVip
	}
	return false
}

func (x *GroupMemberInfo) GetIsSuperVip() bool {
	if x != nil {
		return x.IsSuperVip
	}
	return false
}

func (x *GroupMemberInfo) GetIsSuperQq() bool {
	if x != nil {
		return x.IsSuperQq
	}
	return false
}

func (x *GroupMemberInfo) GetVipLev() int32 {
	if x != nil {
		return x.VipLev
	}
	return 0
}

func (x *GroupMemberInfo) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *GroupMemberInfo) GetLocationShared() bool {
	if x != nil {
		return x.LocationShared
	}
	return false
}

func (x *GroupMemberInfo) GetInt64Distance() int64 {
	if x != nil {
		return x.Int64Distance
	}
	return 0
}

func (x *GroupMemberInfo) GetConcernType() int32 {
	if x != nil {
		return x.ConcernType
	}
	return 0
}

func (x *GroupMemberInfo) GetSpecialTitle() []byte {
	if x != nil {
		return x.SpecialTitle
	}
	return nil
}

func (x *GroupMemberInfo) GetSpecialTitleExpireTime() int32 {
	if x != nil {
		return x.SpecialTitleExpireTime
	}
	return 0
}

func (x *GroupMemberInfo) GetPhoneNum() []byte {
	if x != nil {
		return x.PhoneNum
	}
	return nil
}

func (x *GroupMemberInfo) GetJob() []byte {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *GroupMemberInfo) GetMedalId() int32 {
	if x != nil {
		return x.MedalId
	}
	return 0
}

func (x *GroupMemberInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GroupMemberInfo) GetHonor() string {
	if x != nil {
		return x.Honor
	}
	return ""
}

var File_data_proto protoreflect.FileDescriptor

var file_data_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x02, 0x0a,
	0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x32, 0x0a, 0x0f, 0x72, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x71, 0x52, 0x0d, 0x72, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xac, 0x03, 0x0a, 0x0a, 0x44, 0x35, 0x30, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6b, 0x67,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50,
	0x6b, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x75,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x4d, 0x75, 0x73,
	0x69, 0x63, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0xf9, 0xc6, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x72, 0x65, 0x71, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x3a, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x72,
	0x6b, 0x41, 0x6c, 0x69, 0x65, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x89, 0x95, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x72, 0x65, 0x71, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61,
	0x72, 0x6b, 0x41, 0x6c, 0x69, 0x65, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x12,
	0x72, 0x65, 0x71, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0xc9, 0xcd, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x71, 0x4d,
	0x75, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x4b, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0xd9, 0x9b, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x4b, 0x73, 0x69,
	0x6e, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x4d,
	0x75, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x62, 0x73, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x89, 0x86, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x71, 0x4d, 0x75,
	0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x62, 0x73, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x22, 0x9b, 0x02, 0x0a, 0x0b, 0x44, 0x33, 0x38, 0x38, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x75, 0x62, 0x63,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x0e, 0x6d, 0x73, 0x67, 0x54, 0x72, 0x79, 0x55, 0x70, 0x49, 0x6d,
	0x67, 0x52, 0x65, 0x71, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x79,
	0x55, 0x70, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x52, 0x0e, 0x6d, 0x73, 0x67, 0x54, 0x72, 0x79,
	0x55, 0x70, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x0e, 0x6d, 0x73, 0x67, 0x54,
	0x72, 0x79, 0x55, 0x70, 0x50, 0x74, 0x74, 0x52, 0x65, 0x71, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x54, 0x72, 0x79, 0x55, 0x70, 0x50, 0x74, 0x74, 0x52, 0x65, 0x71, 0x52, 0x0e,
	0x6d, 0x73, 0x67, 0x54, 0x72, 0x79, 0x55, 0x70, 0x50, 0x74, 0x74, 0x52, 0x65, 0x71, 0x12, 0x31,
	0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x50, 0x74, 0x74, 0x52, 0x65, 0x71, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x74, 0x74, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x71, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x50, 0x74, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xe9, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe9,
	0x01, 0x0a, 0x0c, 0x44, 0x33, 0x38, 0x38, 0x52, 0x65, 0x73, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x75, 0x62, 0x43, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x75, 0x62,
	0x43, 0x6d, 0x64, 0x12, 0x35, 0x0a, 0x0e, 0x6d, 0x73, 0x67, 0x54, 0x72, 0x79, 0x55, 0x70, 0x49,
	0x6d, 0x67, 0x52, 0x73, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x72,
	0x79, 0x55, 0x70, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0e, 0x6d, 0x73, 0x67, 0x54,
	0x72, 0x79, 0x55, 0x70, 0x49, 0x6d, 0x67, 0x52, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x0e, 0x6d, 0x73,
	0x67, 0x54, 0x72, 0x79, 0x55, 0x70, 0x50, 0x74, 0x74, 0x52, 0x73, 0x70, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x72, 0x79, 0x55, 0x70, 0x50, 0x74, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x0e, 0x6d, 0x73, 0x67, 0x54, 0x72, 0x79, 0x55, 0x70, 0x50, 0x74, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x37, 0x0a, 0x0f, 0x6d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x50, 0x74, 0x74, 0x55, 0x72,
	0x6c, 0x52, 0x73, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x74, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x73, 0x70, 0x52, 0x0f, 0x6d, 0x73, 0x67, 0x47, 0x65,
	0x74, 0x50, 0x74, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x8e, 0x03, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x50, 0x74, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x73, 0x74,
	0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x73, 0x74, 0x55, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x64, 0x35, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x62, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x56, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x56, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x49, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x75, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x71,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x22, 0x9e, 0x03, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x50, 0x74, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4d, 0x73,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67,
	0x12, 0x22, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x44, 0x6f, 0x77,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f,
	0x77, 0x6e, 0x49, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x44, 0x6f, 0x77, 0x6e, 0x49, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0e, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x36, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x36, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xb6, 0x01, 0x0a,
	0x12, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x48, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x48,
	0x65, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x68, 0x65,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x48, 0x65, 0x61, 0x64, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x42,
	0x61, 0x73, 0x65, 0x68, 0x65, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x53, 0x65,
	0x67, 0x68, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65,
	0x67, 0x48, 0x65, 0x61, 0x64, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x67, 0x68, 0x65, 0x61,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xda, 0x02, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x48, 0x65, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x0b,
	0x6d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x68, 0x65, 0x61, 0x64,
	0x12, 0x28, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x67, 0x68, 0x65, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65, 0x67, 0x48, 0x65, 0x61, 0x64, 0x52, 0x0a,
	0x6d, 0x73, 0x67, 0x53, 0x65, 0x67, 0x68, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x74, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x73, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x73, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x69, 0x67, 0x68, 0x77,
	0x61, 0x79, 0x48, 0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x61, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xe5, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x48, 0x65,
	0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x64, 0x35,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x69, 0x70, 0x22, 0xc5,
	0x04, 0x0a, 0x0b, 0x54, 0x72, 0x79, 0x55, 0x70, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x72, 0x63, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x72,
	0x63, 0x55, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x72, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x72, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x75,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x69, 0x63, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x69, 0x63, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x69, 0x63, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x56, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x56, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x70, 0x70, 0x50, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x50, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x69, 0x63, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x69, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x64, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x76, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x72, 0x76, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x55, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x22, 0x94, 0x02, 0x0a, 0x0c, 0x54, 0x72, 0x79, 0x55, 0x70,
	0x49, 0x6d, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4d, 0x73,
	0x67, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x49, 0x6d, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6d, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x49, 0x6d, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x70, 0x49, 0x70, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x70, 0x49, 0x70, 0x12,
	0x22, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x70, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x55, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x75, 0x70, 0x55, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x69, 0x64, 0x22, 0xc9, 0x03,
	0x0a, 0x0b, 0x54, 0x72, 0x79, 0x55, 0x70, 0x50, 0x74, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x72, 0x63, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x72, 0x63,
	0x55, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x72, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x72, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x75, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x6f, 0x6f, 0x6c, 0x4e, 0x65, 0x77, 0x55, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x4e, 0x65, 0x77, 0x55, 0x70, 0x43, 0x68, 0x61,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x49, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x75, 0x49, 0x64, 0x22, 0xe8, 0x02, 0x0a, 0x0c, 0x54, 0x72,
	0x79, 0x55, 0x70, 0x50, 0x74, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61,
	0x69, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x65,
	0x45, 0x78, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x55, 0x70, 0x49, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x55, 0x70, 0x49, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x55, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x70, 0x55, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x75, 0x70,
	0x55, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x32, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x32, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x75, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x3a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x99, 0x01, 0x0a,
	0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x71,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x73, 0x67, 0x55, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6d, 0x73, 0x67, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x22, 0x19, 0x0a, 0x05, 0x53, 0x75, 0x62, 0x44,
	0x34, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x05, 0x53, 0x75, 0x62, 0x38, 0x41, 0x12, 0x28, 0x0a,
	0x08, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x53, 0x75, 0x62, 0x38, 0x41, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x6d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69,
	0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x0c,
	0x53, 0x75, 0x62, 0x38, 0x41, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x73,
	0x67, 0x53, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x55, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d,
	0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6b, 0x67, 0x4e, 0x75, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6b, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6b, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x6b, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x53,
	0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x76, 0x53, 0x65, 0x71,
	0x22, 0x59, 0x0a, 0x05, 0x53, 0x75, 0x62, 0x42, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a,
	0x0f, 0x6d, 0x73, 0x67, 0x41, 0x64, 0x64, 0x46, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x75, 0x62, 0x42, 0x33, 0x41, 0x64,
	0x64, 0x46, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0f, 0x6d, 0x73, 0x67, 0x41,
	0x64, 0x64, 0x46, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0x39, 0x0a, 0x11, 0x53,
	0x75, 0x62, 0x42, 0x33, 0x41, 0x64, 0x64, 0x46, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x22, 0x7a, 0x0a, 0x05, 0x53, 0x75, 0x62, 0x34, 0x34, 0x12,
	0x39, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x75, 0x62, 0x34, 0x34, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x53, 0x75, 0x62, 0x34, 0x34, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x6e,
	0x63, 0x4d, 0x73, 0x67, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x4d,
	0x73, 0x67, 0x22, 0xf0, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x34, 0x34, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x55, 0x69, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x75, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x57, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x57, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xd1, 0x04, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x34, 0x34, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x72, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x55, 0x69, 0x6e, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x55, 0x69, 0x6e, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x55, 0x69, 0x6e, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x55,
	0x69, 0x6e, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x42, 0x75, 0x66, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x42, 0x75, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x4d, 0x61,
	0x78, 0x4d, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x4d, 0x65, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x4d, 0x65, 0x6d,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x53, 0x72, 0x63, 0x49,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x71, 0x53, 0x72, 0x63, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x53, 0x72, 0x63, 0x53, 0x75, 0x62, 0x49, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x53, 0x72, 0x63, 0x53, 0x75,
	0x62, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xac, 0x01, 0x0a, 0x12, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x69, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x69, 0x63, 0x68, 0x43, 0x61, 0x72,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x22, 0xd0, 0x01, 0x0a, 0x12, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x73, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x6c,
	0x66, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x62, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc5, 0x07, 0x0a, 0x0f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63,
	0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x76, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6c, 0x65, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x69,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x62, 0x61, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x67, 0x62, 0x61, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x62, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x67, 0x62, 0x61, 0x72,
	0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x62, 0x61, 0x72, 0x43, 0x6e, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x62, 0x61, 0x72, 0x43, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x6f,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x56, 0x69, 0x70, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x56, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x59, 0x65, 0x61, 0x72, 0x56, 0x69, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x59, 0x65, 0x61, 0x72, 0x56, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x56, 0x69, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x56, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x51, 0x71, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x51, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x70, 0x4c, 0x65,
	0x76, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6a,
	0x6f, 0x62, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x65, 0x64, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f,
	0x6e, 0x6f, 0x72, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_data_proto_rawDescOnce sync.Once
	file_data_proto_rawDescData = file_data_proto_rawDesc
)

func file_data_proto_rawDescGZIP() []byte {
	file_data_proto_rawDescOnce.Do(func() {
		file_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_proto_rawDescData)
	})
	return file_data_proto_rawDescData
}

var file_data_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_data_proto_goTypes = []interface{}{
	(*DeviceInfo)(nil),           // 0: DeviceInfo
	(*RequestBody)(nil),          // 1: RequestBody
	(*ConfigSeq)(nil),            // 2: ConfigSeq
	(*D50ReqBody)(nil),           // 3: D50ReqBody
	(*D388ReqBody)(nil),          // 4: D388ReqBody
	(*D388RespBody)(nil),         // 5: D388RespBody
	(*GetPttUrlReq)(nil),         // 6: GetPttUrlReq
	(*GetPttUrlRsp)(nil),         // 7: GetPttUrlRsp
	(*ReqDataHighwayHead)(nil),   // 8: ReqDataHighwayHead
	(*RspDataHighwayHead)(nil),   // 9: RspDataHighwayHead
	(*DataHighwayHead)(nil),      // 10: DataHighwayHead
	(*SegHead)(nil),              // 11: SegHead
	(*TryUpImgReq)(nil),          // 12: TryUpImgReq
	(*TryUpImgResp)(nil),         // 13: TryUpImgResp
	(*TryUpPttReq)(nil),          // 14: TryUpPttReq
	(*TryUpPttResp)(nil),         // 15: TryUpPttResp
	(*ImgInfo)(nil),              // 16: ImgInfo
	(*DeleteMessageRequest)(nil), // 17: DeleteMessageRequest
	(*MessageItem)(nil),          // 18: MessageItem
	(*SubD4)(nil),                // 19: SubD4
	(*Sub8A)(nil),                // 20: Sub8A
	(*Sub8AMsgInfo)(nil),         // 21: Sub8AMsgInfo
	(*SubB3)(nil),                // 22: SubB3
	(*SubB3AddFrdNotify)(nil),    // 23: SubB3AddFrdNotify
	(*Sub44)(nil),                // 24: Sub44
	(*Sub44FriendSyncMsg)(nil),   // 25: Sub44FriendSyncMsg
	(*Sub44GroupSyncMsg)(nil),    // 26: Sub44GroupSyncMsg
	(*GroupMemberReqBody)(nil),   // 27: GroupMemberReqBody
	(*GroupMemberRspBody)(nil),   // 28: GroupMemberRspBody
	(*GroupMemberInfo)(nil),      // 29: GroupMemberInfo
}
var file_data_proto_depIdxs = []int32{
	2,  // 0: RequestBody.rpt_config_list:type_name -> ConfigSeq
	12, // 1: D388ReqBody.msgTryUpImgReq:type_name -> TryUpImgReq
	14, // 2: D388ReqBody.msgTryUpPttReq:type_name -> TryUpPttReq
	6,  // 3: D388ReqBody.msgGetPttReq:type_name -> GetPttUrlReq
	13, // 4: D388RespBody.msgTryUpImgRsp:type_name -> TryUpImgResp
	15, // 5: D388RespBody.msgTryUpPttRsp:type_name -> TryUpPttResp
	7,  // 6: D388RespBody.msgGetPttUrlRsp:type_name -> GetPttUrlRsp
	10, // 7: ReqDataHighwayHead.msgBasehead:type_name -> DataHighwayHead
	11, // 8: ReqDataHighwayHead.msgSeghead:type_name -> SegHead
	10, // 9: RspDataHighwayHead.msgBasehead:type_name -> DataHighwayHead
	11, // 10: RspDataHighwayHead.msgSeghead:type_name -> SegHead
	16, // 11: TryUpImgResp.msgImgInfo:type_name -> ImgInfo
	18, // 12: DeleteMessageRequest.items:type_name -> MessageItem
	21, // 13: Sub8A.msg_info:type_name -> Sub8AMsgInfo
	23, // 14: SubB3.msgAddFrdNotify:type_name -> SubB3AddFrdNotify
	25, // 15: Sub44.friendSyncMsg:type_name -> Sub44FriendSyncMsg
	26, // 16: Sub44.groupSyncMsg:type_name -> Sub44GroupSyncMsg
	29, // 17: GroupMemberRspBody.memInfo:type_name -> GroupMemberInfo
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_data_proto_init() }
func file_data_proto_init() {
	if File_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSeq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*D50ReqBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*D388ReqBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*D388RespBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPttUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPttUrlRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDataHighwayHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDataHighwayHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataHighwayHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryUpImgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryUpImgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryUpPttReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryUpPttResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubD4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sub8A); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sub8AMsgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubB3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubB3AddFrdNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sub44); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sub44FriendSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sub44GroupSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberReqBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberRspBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_data_proto_goTypes,
		DependencyIndexes: file_data_proto_depIdxs,
		MessageInfos:      file_data_proto_msgTypes,
	}.Build()
	File_data_proto = out.File
	file_data_proto_rawDesc = nil
	file_data_proto_goTypes = nil
	file_data_proto_depIdxs = nil
}
